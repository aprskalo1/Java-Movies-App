/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.IMovieRepo;
import hr.algebra.dal.IWholeMovieRepo;
import hr.algebra.dal.MovieRepoFactory;
import hr.algebra.dal.SessionManager;
import hr.algebra.dal.WholeMovieRepoFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MovieTableModel;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;
import static javax.swing.text.html.HTML.Attribute.DIR;

/**
 *
 * @author Ante Prskalo
 */
public class EditMoviesPanel extends javax.swing.JPanel {

    SessionManager selectedMovieSession;
    private MovieTableModel movieTableModel;
    private Movie selectedMovie;

    private static final String FILENAME = "src/main/resources/paperarchive.xml";
    private final List<Movie> movies = new ArrayList<>();
    private List<Actor> selectedMovieActors = new ArrayList<>();
    private List<Director> selectedMovieDirectors = new ArrayList<>();

    /**
     * Creates new form EditMoviesPanel
     */
    public EditMoviesPanel() {
        initComponents();

        try {
            initValidation();
            initRepo();
            initMoviesTable();
            hideError();
        } catch (Exception e) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, e);
            MessageUtils.showErrorMessage("Form", "Cannot initialize form");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        lblIcon = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        btnChooseImage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescripiton = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfYearMade = new javax.swing.JTextField();
        tfLength = new javax.swing.JTextField();
        tfGenre = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate1 = new javax.swing.JButton();
        lblTitleErr = new javax.swing.JLabel();
        lblPublishedDateErr = new javax.swing.JLabel();
        lblDescErr = new javax.swing.JLabel();
        lblOriginalTitleErr = new javax.swing.JLabel();
        lblLengthErr = new javax.swing.JLabel();
        lblYearMadeErr = new javax.swing.JLabel();
        lblGenreErr = new javax.swing.JLabel();
        lblPicPathErr = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        lbActors = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        lbDirectors = new javax.swing.JList<>();
        btnSave = new javax.swing.JButton();

        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbMovies);

        lblIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\Ante Prskalo\\OneDrive\\Radna povr≈°ina\\FAKS\\JAVA\\PROJECT\\MovieManager\\CoolMovie\\src\\main\\resources\\assets\\noimage.jpg")); // NOI18N

        tfPicturePath.setEditable(false);

        btnChooseImage.setText("Choose image");
        btnChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageActionPerformed(evt);
            }
        });

        jLabel1.setText("Title");

        tfPublishedDate.setName("DATE"); // NOI18N

        jLabel2.setText("Published date");

        jLabel3.setText("Description");

        taDescripiton.setColumns(20);
        taDescripiton.setLineWrap(true);
        taDescripiton.setRows(5);
        jScrollPane2.setViewportView(taDescripiton);

        jLabel4.setText("Actors");

        jLabel5.setText("Directors");

        jLabel6.setText("Original title");

        jLabel7.setText("Year made");

        tfYearMade.setName("YEAR"); // NOI18N

        tfLength.setName("LENGTH"); // NOI18N

        jLabel8.setText("Genre");

        jLabel9.setText("Length");

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 102, 102));
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate1.setText("UPDATE");
        btnUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate1ActionPerformed(evt);
            }
        });

        lblTitleErr.setForeground(new java.awt.Color(255, 51, 51));
        lblTitleErr.setText("X");

        lblPublishedDateErr.setForeground(new java.awt.Color(255, 51, 51));
        lblPublishedDateErr.setText("X");

        lblDescErr.setForeground(new java.awt.Color(255, 51, 51));
        lblDescErr.setText("X");

        lblOriginalTitleErr.setForeground(new java.awt.Color(255, 51, 51));
        lblOriginalTitleErr.setText("X");

        lblLengthErr.setForeground(new java.awt.Color(255, 51, 51));
        lblLengthErr.setText("X");

        lblYearMadeErr.setForeground(new java.awt.Color(255, 51, 51));
        lblYearMadeErr.setText("X");

        lblGenreErr.setForeground(new java.awt.Color(255, 51, 51));
        lblGenreErr.setText("X");

        lblPicPathErr.setForeground(new java.awt.Color(255, 51, 51));
        lblPicPathErr.setText("X");

        jScrollPane3.setViewportView(lbActors);

        jScrollPane5.setViewportView(jScrollPane3);

        jScrollPane4.setViewportView(lbDirectors);

        jScrollPane6.setViewportView(jScrollPane4);

        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfOriginalTitle)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfLength, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblTitleErr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPublishedDateErr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDescErr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblOriginalTitleErr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblLengthErr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                                        .addComponent(tfYearMade))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblYearMadeErr)))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(tfGenre, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnUpdate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblGenreErr))
                                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(lblPicPathErr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnChooseImage))
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblIcon)
                                .addGap(20, 20, 20)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitleErr))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPublishedDateErr))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addComponent(lblDescErr))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOriginalTitleErr)
                            .addComponent(tfYearMade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblYearMadeErr))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel8))
                                .addGap(28, 28, 28))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblLengthErr)
                                .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblGenreErr)))
                        .addGap(31, 31, 31)
                        .addComponent(btnAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate1)
                            .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChooseImage)
                            .addComponent(lblPicPathErr))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        setIcon(lblIcon, file);
    }//GEN-LAST:event_btnChooseImageActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!formValidation()) {
            return;
        }

        try {
            String localPath = uploadPicture();
            Movie movie = new Movie(
                    tfTitle.getText().trim(),
                    tfOriginalTitle.getText().trim(),
                    LocalDateTime.parse(tfPublishedDate.getText(), Movie.DATE_FORMATTER),
                    taDescripiton.getText().trim(),
                    Integer.parseInt(tfLength.getText()),
                    Integer.parseInt(tfYearMade.getText()),
                    tfGenre.getText().trim(),
                    localPath
            );
            repo.createMovie(movie);
            movieTableModel.setMovies(repo.selectMovies());
            clearForm();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate1ActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
            return;
        }
        if (!formValidation()) {
            return;
        }
        try {
            if (!tfPicturePath.getText().trim().equals(selectedMovie.getPicturePath())) {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                String localPicturePath = uploadPicture();
                selectedMovie.setPicturePath(localPicturePath);
            }

            selectedMovie.setMovieTitle(tfTitle.getText().trim());
            selectedMovie.setDatePublished(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER));
            selectedMovie.setMovieDescription(taDescripiton.getText().trim());
            selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
            selectedMovie.setMovieLength(Integer.parseInt(tfLength.getText().trim()));
            selectedMovie.setYearMade(Integer.parseInt(tfYearMade.getText().trim()));
            selectedMovie.setMovieGenre(tfGenre.getText().trim());

            repo.updateMovie(selectedMovie.getId(), selectedMovie);
            movieTableModel.setMovies(repo.selectMovies());

            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to update article!");
        }
    }//GEN-LAST:event_btnUpdate1ActionPerformed

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie you want to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Really?")) {
            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                repo.deleteMovie(selectedMovie.getId());
                movieTableModel.setMovies(repo.selectMovies());
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Cannot do!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        try {
            initMoviesTable();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (selectedMovie == null) {
            return;
        }
        try {
            refreshListBoxes();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formHierarchyChanged

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        try {
            selectedMovieActors = wholeMovieRepo.selectSpecificActors(selectedMovie);
            selectedMovieDirectors = wholeMovieRepo.selectSpecificDirectors(selectedMovie);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        MovieArchive archive = new MovieArchive(movies);
        Movie movieForXML = new Movie(
                selectedMovieActors,
                selectedMovieDirectors,
                selectedMovie.getId(),
                selectedMovie.getMovieTitle(),
                selectedMovie.getOriginalTitle(),
                selectedMovie.getDatePublished(),
                selectedMovie.getMovieDescription(),
                selectedMovie.getMovieLength(),
                selectedMovie.getYearMade(),
                selectedMovie.getMovieGenre(),
                selectedMovie.getPicturePath()
        );
        movies.add(movieForXML);

        try {
            JAXBUtils.save(archive, FILENAME);
            MessageUtils.showInformationMessage("Info", "Movie saved!");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save movies");
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChooseImage;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JList<String> lbActors;
    private javax.swing.JList<String> lbDirectors;
    private javax.swing.JLabel lblDescErr;
    private javax.swing.JLabel lblGenreErr;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblLengthErr;
    private javax.swing.JLabel lblOriginalTitleErr;
    private javax.swing.JLabel lblPicPathErr;
    private javax.swing.JLabel lblPublishedDateErr;
    private javax.swing.JLabel lblTitleErr;
    private javax.swing.JLabel lblYearMadeErr;
    private javax.swing.JTextArea taDescripiton;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfLength;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfYearMade;
    // End of variables declaration//GEN-END:variables

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfPublishedDate, taDescripiton, tfOriginalTitle, tfLength, tfYearMade, tfGenre, tfPicturePath);
        errorLabels = Arrays.asList(lblTitleErr, lblPublishedDateErr, lblDescErr, lblOriginalTitleErr, lblLengthErr, lblYearMadeErr, lblGenreErr, lblPicPathErr);
    }

    private void setIcon(JLabel lblIcon, File file) {
        try {
            lblIcon.setIcon(IconUtils.createIcon(file, lblIcon.getWidth(), lblIcon.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private boolean formValidation() {
        hideError();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
            if ("DATE".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }
            if ("LENGTH".equals(validationFields.get(i).getName()) || "YEAR".equals(validationFields.get(i).getName())) {
                try {
                    Integer.valueOf(validationFields.get(i).getText().trim());
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }
        }
        return ok;
    }

    private void hideError() {
        errorLabels.forEach(el -> el.setVisible(false));
    }

    private static IMovieRepo repo;
    private static IWholeMovieRepo wholeMovieRepo;

    private void initRepo() {
        repo = MovieRepoFactory.getRepository();
        wholeMovieRepo = WholeMovieRepoFactory.getRepository();
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfPicturePath.getText();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;

        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private void clearForm() {
        hideError();
        validationFields.forEach(e -> e.setText(""));
        lblIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/noimage.jpg")));
    }

    private void initMoviesTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        movieTableModel = new MovieTableModel(repo.selectMovies());
        tbMovies.setModel(movieTableModel);
    }

    private void showMovie() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> movie = repo.selectMovie(selectedMovieId);
            if (movie.isPresent()) {
                selectedMovie = movie.get();
                fillActors(selectedMovie);
                fillDirectors(selectedMovie);
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show article!");
        }
    }

    private void fillForm(Movie selectedMovie) {
        selectedMovieSession.setSelectedMovie(selectedMovie);
        tfTitle.setText(selectedMovie.getMovieTitle());
        tfPublishedDate.setText(selectedMovie.getDatePublished().format(Movie.DATE_FORMATTER));
        taDescripiton.setText(selectedMovie.getMovieDescription());
        tfOriginalTitle.setText(selectedMovie.getOriginalTitle());
        tfLength.setText(String.valueOf(selectedMovie.getMovieLength()));
        tfYearMade.setText(String.valueOf(selectedMovie.getYearMade()));
        tfGenre.setText(selectedMovie.getMovieGenre());

        if (selectedMovie.getPicturePath() != null && Files.exists(Paths.get(selectedMovie.getPicturePath()))) {
            tfPicturePath.setText(selectedMovie.getPicturePath());
            setIcon(lblIcon, new File(selectedMovie.getPicturePath()));
        }
    }

    private void fillActors(Movie selectedMovie) throws Exception {
        lbActors.removeAll();

        List<Actor> actors = wholeMovieRepo.selectSpecificActors(selectedMovie);
        DefaultListModel<String> model = new DefaultListModel<>();

        actors.forEach(a -> model.addElement(a.getFullName()));
        lbActors.setModel(model);

    }

    private void fillDirectors(Movie selectedMovie) throws Exception {
        lbDirectors.removeAll();

        List<Director> directors = wholeMovieRepo.selectSpecificDirectors(selectedMovie);
        DefaultListModel<String> model = new DefaultListModel<>();

        directors.forEach(a -> model.addElement(a.getFullName()));
        lbDirectors.setModel(model);
    }

    public void refreshListBoxes() throws Exception {
        if (selectedMovie == null) {
            return;
        }
        fillActors(selectedMovie);
        fillDirectors(selectedMovie);
    }
}
