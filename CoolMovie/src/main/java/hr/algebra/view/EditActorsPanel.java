/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.IMovieRepo;
import hr.algebra.dal.IWholeMovieRepo;
import hr.algebra.dal.MovieRepoFactory;
import hr.algebra.dal.WholeMovieRepoFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Movie;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.DataFlavor;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;

/**
 *
 * @author Ante Prskalo
 */
public class EditActorsPanel extends javax.swing.JPanel {

    private String selectedActor;
    EditMoviesPanel moviePanel = new EditMoviesPanel();

    /**
     * Creates new form EditActorsPanel
     */
    public EditActorsPanel() {
        initComponents();

        try {
            initRepo();
            loadMovies();
            loadActors();
            initDragDrop();
            lblFullNameError.setVisible(false);
        } catch (Exception e) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, e);
            MessageUtils.showErrorMessage("Form", "Cannot initialize form");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbActors = new javax.swing.JComboBox<>();
        cbMovies = new javax.swing.JComboBox<>();
        btnAssignActor = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tfActorCrud = new javax.swing.JTextField();
        cbMoviesCrud = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbActorsCrud = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnActorDelete = new javax.swing.JButton();
        btnActorUpdate = new javax.swing.JButton();
        btnActorAdd = new javax.swing.JButton();
        lblFullNameError = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbAllActors = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lbFavouriteActors = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();

        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        jLabel1.setText("Actors");

        jLabel2.setText("Movies");

        btnAssignActor.setText("ASSIGN");
        btnAssignActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActorActionPerformed(evt);
            }
        });

        jLabel3.setText("Full name");

        jLabel4.setText("Movies");

        cbActorsCrud.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbActorsCrudItemStateChanged(evt);
            }
        });

        jLabel5.setText("Actors");

        btnActorDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnActorDelete.setText("DELETE");
        btnActorDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorDeleteActionPerformed(evt);
            }
        });

        btnActorUpdate.setText("UPDATE");
        btnActorUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorUpdateActionPerformed(evt);
            }
        });

        btnActorAdd.setText("ADD");
        btnActorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActorAddActionPerformed(evt);
            }
        });

        lblFullNameError.setForeground(new java.awt.Color(255, 51, 51));
        lblFullNameError.setText("X");

        jScrollPane1.setViewportView(lbAllActors);

        jLabel6.setText("Actors");

        jScrollPane2.setViewportView(lbFavouriteActors);

        jLabel7.setText("Favourite Actors");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbMovies, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbActors, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAssignActor, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfActorCrud)
                            .addComponent(cbMoviesCrud, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(cbActorsCrud, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnActorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnActorUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnActorDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFullNameError))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(416, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfActorCrud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFullNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMoviesCrud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbActorsCrud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnActorUpdate)
                            .addComponent(btnActorAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActorDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbActors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssignActor)))
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(228, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActorActionPerformed

        try {
            String selectedActor = cbActors.getSelectedItem().toString();
            String selectedMovie = cbMovies.getSelectedItem().toString();

            if (selectedActor.isEmpty() || selectedMovie.isEmpty()) {
                return;
            }

            wholeMovieRepo.assignActor(getSelectedActorId(selectedActor), getSelectedMovieId(selectedMovie));
            moviePanel.refreshListBoxes();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAssignActorActionPerformed

    private void cbActorsCrudItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbActorsCrudItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            showActor();
        }
    }//GEN-LAST:event_cbActorsCrudItemStateChanged

    private void btnActorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorAddActionPerformed
        if (!formValidation()) {
            return;
        }

        try {
            Actor actor = new Actor(tfActorCrud.getText(), getSelectedMovieId(cbMoviesCrud.getSelectedItem().toString()));
            wholeMovieRepo.createActor(actor);

            loadActors();
            loadMovies();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnActorAddActionPerformed

    private void btnActorUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorUpdateActionPerformed
        if (!formValidation()) {
            return;
        }
        try {
            Actor actor = new Actor(getSelectedActorId(selectedActor), tfActorCrud.getText(), getSelectedMovieId(cbMoviesCrud.getSelectedItem().toString()));
            wholeMovieRepo.updateActor(actor);

            loadActors();
            loadMovies();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnActorUpdateActionPerformed

    private void btnActorDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActorDeleteActionPerformed
        if (!formValidation()) {
            return;
        }
        try {
            wholeMovieRepo.deleteActor(getSelectedActorId(selectedActor));

            loadActors();
            loadMovies();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnActorDeleteActionPerformed

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        try {
            loadMovies();
            loadActors();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formHierarchyChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActorAdd;
    private javax.swing.JButton btnActorDelete;
    private javax.swing.JButton btnActorUpdate;
    private javax.swing.JButton btnAssignActor;
    private javax.swing.JComboBox<String> cbActors;
    private javax.swing.JComboBox<String> cbActorsCrud;
    private javax.swing.JComboBox<String> cbMovies;
    private javax.swing.JComboBox<String> cbMoviesCrud;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lbAllActors;
    private javax.swing.JList<String> lbFavouriteActors;
    private javax.swing.JLabel lblFullNameError;
    private javax.swing.JTextField tfActorCrud;
    // End of variables declaration//GEN-END:variables

    private static IMovieRepo movieRepo;
    private static IWholeMovieRepo wholeMovieRepo;

    private void initRepo() {
        movieRepo = MovieRepoFactory.getRepository();
        wholeMovieRepo = WholeMovieRepoFactory.getRepository();
    }

    private void loadMovies() throws Exception {
        cbMovies.removeAllItems();
        cbMoviesCrud.removeAllItems();
        List<Movie> movies = movieRepo.selectMovies();
        movies.forEach(m -> cbMovies.addItem(m.getMovieTitle()));
        movies.forEach(m -> cbMoviesCrud.addItem(m.getMovieTitle()));
    }

    private void loadActors() throws Exception {
        cbActors.removeAllItems();
        cbActorsCrud.removeAllItems();
        List<Actor> actors = wholeMovieRepo.selectActors();
        actors.forEach(a -> cbActors.addItem(a.getFullName()));
        actors.forEach(a -> cbActorsCrud.addItem(a.getFullName()));
    }

    private int getSelectedActorId(String fullName) throws Exception {
        List<Actor> actors = wholeMovieRepo.selectActors();

        for (Actor actor : actors) {
            if (actor.getFullName().equals(fullName)) {
                return (actor.getId());
            }
        }

        return 0;
    }

    private int getSelectedMovieId(String movieTitle) throws Exception {
        List<Movie> movies = movieRepo.selectMovies();

        for (Movie movie : movies) {
            if (movie.getMovieTitle().equals(movieTitle)) {
                return (movie.getId());
            }
        }

        return 0;
    }

    private void showActor() {
        selectedActor = cbActorsCrud.getSelectedItem().toString();
        tfActorCrud.setText(selectedActor);
    }

    private boolean formValidation() {
        if (tfActorCrud.getText().isEmpty() || tfActorCrud.getText().trim().isEmpty()) {
            lblFullNameError.setVisible(true);
            return false;
        }
        lblFullNameError.setVisible(false);
        return true;
    }

    private void initDragDrop() throws Exception {
        List<Actor> actors = wholeMovieRepo.selectActors();
        DefaultListModel<String> model = new DefaultListModel<>();
        actors.forEach(a -> model.addElement(a.getFullName()));
        lbAllActors.setModel(model);

        lbAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lbAllActors.setDragEnabled(true);

        DefaultListModel<String> targetModel = new DefaultListModel<>(); 
        lbFavouriteActors.setModel(targetModel); 

        lbFavouriteActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lbFavouriteActors.setDropMode(DropMode.INSERT);
        lbFavouriteActors.setTransferHandler(new TransferHandler() {
            public boolean canImport(TransferSupport support) {
                return support.isDataFlavorSupported(DataFlavor.stringFlavor)
                        && support.getComponent() != lbAllActors;
            }

            public boolean importData(TransferSupport support) {
                try {
                    String data = (String) support.getTransferable().getTransferData(DataFlavor.stringFlavor);

                    targetModel.addElement(data);
                    return true;
                } catch (Exception ex) {
                    ex.printStackTrace();
                    return false;
                }
            }
        });
    }

}
