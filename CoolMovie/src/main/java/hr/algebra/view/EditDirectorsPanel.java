/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.IMovieRepo;
import hr.algebra.dal.IWholeMovieRepo;
import hr.algebra.dal.MovieRepoFactory;
import hr.algebra.dal.WholeMovieRepoFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.utilities.MessageUtils;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Ante Prskalo
 */
public class EditDirectorsPanel extends javax.swing.JPanel {

    private String selectedDirector;

    /**
     * Creates new form EditDirectorsPanel
     */
    public EditDirectorsPanel() {
        initComponents();

        try {
            initRepo();
            loadMovies();
            loadDirectors();
            lblFullNameError.setVisible(false);
        } catch (Exception e) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, e);
            MessageUtils.showErrorMessage("Form", "Cannot initialize form");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbDirectors = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbMovies = new javax.swing.JComboBox<>();
        btnAssignDirector = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tfDirectorCrud = new javax.swing.JTextField();
        cbMoviesCrud = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbDirectorsCrud = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnDirectorDelete = new javax.swing.JButton();
        btnDirectorUpdate = new javax.swing.JButton();
        btnDirectorAdd = new javax.swing.JButton();
        lblFullNameError = new javax.swing.JLabel();

        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        jLabel1.setText("Directors");

        jLabel2.setText("Movies");

        btnAssignDirector.setText("ASSIGN");
        btnAssignDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignDirectorActionPerformed(evt);
            }
        });

        jLabel3.setText("Full name");

        jLabel4.setText("Movies");

        cbDirectorsCrud.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDirectorsCrudItemStateChanged(evt);
            }
        });

        jLabel5.setText("Actors");

        btnDirectorDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDirectorDelete.setText("DELETE");
        btnDirectorDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorDeleteActionPerformed(evt);
            }
        });

        btnDirectorUpdate.setText("UPDATE");
        btnDirectorUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorUpdateActionPerformed(evt);
            }
        });

        btnDirectorAdd.setText("ADD");
        btnDirectorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectorAddActionPerformed(evt);
            }
        });

        lblFullNameError.setForeground(new java.awt.Color(255, 51, 51));
        lblFullNameError.setText("X");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbMovies, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDirectors, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAssignDirector, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                .addGap(220, 220, 220)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfDirectorCrud)
                    .addComponent(cbMoviesCrud, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(cbDirectorsCrud, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDirectorAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDirectorUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnDirectorDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFullNameError)
                .addContainerGap(374, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(231, 231, 231)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDirectorCrud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFullNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMoviesCrud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDirectorsCrud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDirectorUpdate)
                            .addComponent(btnDirectorAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDirectorDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssignDirector)))
                .addContainerGap(299, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignDirectorActionPerformed

        try {
            String selectedDirector = cbDirectors.getSelectedItem().toString();
            String selectedMovie = cbMovies.getSelectedItem().toString();

            if (selectedDirector.isEmpty() || selectedMovie.isEmpty()) {
                return;
            }

            wholeMovieRepo.assignDirector(getSelectedDirectorId(selectedDirector), getSelectedMovieId(selectedMovie));
        } catch (Exception ex) {
            Logger.getLogger(EditDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }    }//GEN-LAST:event_btnAssignDirectorActionPerformed

    private void cbDirectorsCrudItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDirectorsCrudItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            showDirector();
        }
    }//GEN-LAST:event_cbDirectorsCrudItemStateChanged

    private void btnDirectorDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorDeleteActionPerformed
        if (!formValidation()) {
            return;
        }
        try {
            wholeMovieRepo.deleteDirector(getSelectedDirectorId(selectedDirector));

            loadDirectors();
            loadMovies();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDirectorDeleteActionPerformed

    private void btnDirectorUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorUpdateActionPerformed
        if (!formValidation()) {
            return;
        }
        try {
            Director director = new Director(getSelectedDirectorId(selectedDirector), tfDirectorCrud.getText(), getSelectedMovieId(cbMoviesCrud.getSelectedItem().toString()));
            wholeMovieRepo.updateDirector(director);

            loadDirectors();
            loadMovies();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDirectorUpdateActionPerformed

    private void btnDirectorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectorAddActionPerformed
        if (!formValidation()) {
            return;
        }

        try {
            Director director = new Director(tfDirectorCrud.getText(), getSelectedMovieId(cbMoviesCrud.getSelectedItem().toString()));
            wholeMovieRepo.createDirector(director);

            loadDirectors();
            loadMovies();
        } catch (Exception ex) {
            Logger.getLogger(EditActorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDirectorAddActionPerformed

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        try {
            loadMovies();
            loadDirectors();
        } catch (Exception ex) {
            Logger.getLogger(EditDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formHierarchyChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignDirector;
    private javax.swing.JButton btnDirectorAdd;
    private javax.swing.JButton btnDirectorDelete;
    private javax.swing.JButton btnDirectorUpdate;
    private javax.swing.JComboBox<String> cbDirectors;
    private javax.swing.JComboBox<String> cbDirectorsCrud;
    private javax.swing.JComboBox<String> cbMovies;
    private javax.swing.JComboBox<String> cbMoviesCrud;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblFullNameError;
    private javax.swing.JTextField tfDirectorCrud;
    // End of variables declaration//GEN-END:variables

    private static IMovieRepo movieRepo;
    private static IWholeMovieRepo wholeMovieRepo;

    private void initRepo() {
        movieRepo = MovieRepoFactory.getRepository();
        wholeMovieRepo = WholeMovieRepoFactory.getRepository();
    }

    private void loadMovies() throws Exception {
        cbMovies.removeAllItems();
        cbMoviesCrud.removeAllItems();
        List<Movie> movies = movieRepo.selectMovies();
        movies.forEach(m -> cbMovies.addItem(m.getMovieTitle()));
        movies.forEach(m -> cbMoviesCrud.addItem(m.getMovieTitle()));
    }

    private void loadDirectors() throws Exception {
        cbDirectors.removeAllItems();
        cbDirectorsCrud.removeAllItems();
        List<Director> directors = wholeMovieRepo.selectDirectors();
        directors.forEach(a -> cbDirectors.addItem(a.getFullName()));
        directors.forEach(a -> cbDirectorsCrud.addItem(a.getFullName()));
    }

    private int getSelectedDirectorId(String fullName) throws Exception {
        List<Director> directors = wholeMovieRepo.selectDirectors();

        for (Director director : directors) {
            if (director.getFullName().equals(fullName)) {
                return (director.getId());
            }
        }

        return 0;
    }

    private int getSelectedMovieId(String movieTitle) throws Exception {
        List<Movie> movies = movieRepo.selectMovies();

        for (Movie movie : movies) {
            if (movie.getMovieTitle().equals(movieTitle)) {
                return (movie.getId());
            }
        }

        return 0;
    }

    private void showDirector() {
        selectedDirector = cbDirectorsCrud.getSelectedItem().toString();
        tfDirectorCrud.setText(selectedDirector);
    }

    private boolean formValidation() {
        if (tfDirectorCrud.getText().isEmpty() || tfDirectorCrud.getText().trim().isEmpty()) {
            lblFullNameError.setVisible(true);
            return false;
        }
        lblFullNameError.setVisible(false);
        return true;
    }
}
